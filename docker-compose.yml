version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: file_collaboration_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: file_collaboration_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
      # Keep password authentication for security
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init_database.py:/docker-entrypoint-initdb.d/init_database.py
      - ./pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5433:5432"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d file_collaboration_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - file_collaboration_network

  # Backend FastAPI Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: file_collaboration_backend
    restart: unless-stopped
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=5433
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=12345678
      - POSTGRES_DB=file_collaboration_db
      - FRONTEND_HOST=http://localhost:3000
      - BACKEND_CORS_ORIGINS=http://localhost:3000,http://frontend:3000
      - ENVIRONMENT=local
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    networks:
      - file_collaboration_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend Vue.js Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: file_collaboration_frontend
    restart: unless-stopped
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - file_collaboration_network
    command: npm run dev -- --host 0.0.0.0 --port 3000

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: file_collaboration_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - file_collaboration_network

volumes:
  postgres_data:
    driver: local
  backend_logs:
    driver: local

networks:
  file_collaboration_network:
    driver: bridge
