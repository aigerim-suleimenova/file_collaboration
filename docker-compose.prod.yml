version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: file_collaboration_db_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-file_collaboration_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"  # Only accessible from localhost
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-file_collaboration_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - file_collaboration_network_prod

  # Backend FastAPI Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: file_collaboration_backend_prod
    restart: unless-stopped
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-file_collaboration_db}
      - FRONTEND_HOST=${FRONTEND_HOST}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
    ports:
      - "127.0.0.1:8000:8000"  # Only accessible from localhost
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - backend_logs_prod:/app/logs
    networks:
      - file_collaboration_network_prod
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000

  # Frontend Vue.js Service (Production Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: file_collaboration_frontend_prod
    restart: unless-stopped
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
      - VITE_COLLAB_WS=${VITE_COLLAB_WS}
    ports:
      - "80:80"  # Standard HTTP port
      - "443:443"  # HTTPS port
    depends_on:
      - backend
    networks:
      - file_collaboration_network_prod

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: file_collaboration_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - file_collaboration_network_prod

volumes:
  postgres_data_prod:
    driver: local
  backend_logs_prod:
    driver: local

networks:
  file_collaboration_network_prod:
    driver: bridge
