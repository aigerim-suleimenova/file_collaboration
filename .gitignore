# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to include the following files:
#  .idea/
#  *.iml
#  *.ipr
#  *.iws
.idea/
*.iml
*.ipr
*.iws

# VS Code
.vscode/
*.code-workspace

# Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
public

# Vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# Vue.js
dist/
dist-ssr/
*.local

# Quasar
.quasar

# Vite
.vite/

# ===== PROJECT SPECIFIC =====

# File collaboration specific
collab-config.js
test-collab.html
test-collab.md
test-props.html
test-room-connection.js
test-websocket.html

# Node setup scripts
setup-node18.sh
start-collab*.sh

# Manual test files
test_*.py
test_*.sh

# Database
*.db
*.sqlite
*.sqlite3

# Logs
logs
*.log

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Temporary files
*.tmp
*.temp
*.swp
*.swo
*~

# Docker
.dockerignore

# Local configuration files
config.local.*
.env.local
.env.development
.env.test
.env.production
.env

# Backup files
*.bak
*.backup
*.old

# IDE specific files
.vscode/
.idea/
*.sublime-project
*.sublime-workspace

# Testing
.coverage
.pytest_cache/
.tox/
htmlcov/

# Documentation
docs/_build/
site/

# Alembic
alembic/versions/*.py
!alembic/versions/__init__.py

# Local development
local_settings.py
local_config.py

# ===== DEPLOYMENT & PRODUCTION =====

# Production environment files
.env.production
.env.staging
.env.local

# Docker production files
docker-compose.prod.yml
docker-compose.staging.yml

# SSL certificates
ssl/
*.pem
*.key
*.crt
*.csr

# Nginx configuration
nginx.conf

# Railway configuration
railway.json
railway.toml

# Vercel configuration - removed since we're not using Vercel
# vercel.json
# .vercel/

# Deployment scripts
deploy.sh
deploy-*.sh

# ===== COLLABORATION & WEBSOCKET =====

# Collaboration server logs
collab-server.log
websocket.log

# Yjs collaboration data
.yjs/
collab-data/

# ===== BUILD & DISTRIBUTION =====

# Frontend build outputs
frontend/dist/
frontend/dist-ssr/
frontend/.vite/

# Backend build outputs
backend/build/
backend/dist/
backend/*.egg-info/

# ===== LOGS & MONITORING =====

# Application logs
server.log
app.log
*.log

# Log directories
logs/
log/

# ===== DATABASE & STORAGE =====

# Database files
*.db
*.sqlite
*.sqlite3
*.sql

# Database dumps
*.dump
*.sql.gz
*.backup

# S3 cache
.s3_cache/
aws_cache/

# ===== SECURITY & KEYS =====

# API keys and secrets
secrets/
keys/
*.key
*.pem
*.p12

# AWS credentials
.aws/
aws_config.py
s3_operations.py

# ===== TEMPORARY & CACHE =====

# Temporary files
*.tmp
*.temp
*.swp
*.swo
*~

# Cache directories
.cache/
cache/
__pycache__/
*.pyc

# ===== OS & SYSTEM =====

# macOS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini

# Linux
*~

# ===== VERSION CONTROL =====

# Git
.git/
.gitignore
.gitattributes

# Mercurial
.hg/
.hgignore

# SVN
.svn/

# ===== DEPLOYMENT PLATFORMS =====

# Vercel - removed since we're not using Vercel
# .vercel/

# Railway
.railway/

# Netlify
.netlify/
netlify.toml

# Heroku
.heroku/
Procfile

# AWS
.aws/
aws-exports.js

# ===== MONITORING & ANALYTICS =====

# Sentry
.sentryclirc

# LogRocket
logrocket.js

# ===== DEVELOPMENT TOOLS =====

# Prettier
.prettierrc
.prettierignore

# ESLint
.eslintrc*
.eslintignore

# Stylelint
.stylelintrc*
.stylelintignore

# EditorConfig
.editorconfig

# ===== PACKAGE MANAGERS =====

# npm
npm-shrinkwrap.json

# yarn
.yarnrc

# pnpm
.pnpmrc
